{"version":3,"file":"Filterable.js","sourceRoot":"","sources":["../src/Filterable.ts"],"names":[],"mappings":";;AAWA;IA0BI,oBAAY,KAAgB,EAAE,MAAiB;QAE3C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,CAAC;IAQD,sBAAI,mCAAW;aAAf;YAEI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACvB,CAAC;;;OAAA;IAOD,sBAAI,+BAAO;aAAX;YAEI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACzB,CAAC;aACD,UAAY,OAAiB;YAA7B,iBAuCC;YArCG,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAClB,CAAC;gBACG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,MAAc;oBACjC,EAAE,CAAC,CAAC,MAAM,CAAC,CACX,CAAC;wBACG,MAAM,CAAC,UAAU,EAAE,CAAC;oBACxB,CAAC;gBACL,CAAC,CAAC,CAAC;gBACH,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBAErB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACtC,CAAC;YAED,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,CAC9B,CAAC;gBACG,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAGjC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;gBAGzB,IAAI,YAAU,GAAW,IAAI,CAAC;gBAC9B,OAAO,CAAC,OAAO,CAAC,UAAC,MAAc;oBAC3B,EAAE,CAAC,CAAC,YAAU,KAAK,IAAI,CAAC,CACxB,CAAC;wBAGG,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;oBAC5C,CAAC;oBACD,IAAI,CACJ,CAAC;wBACG,YAAU,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;oBAC3C,CAAC;oBACD,YAAU,GAAG,MAAM,CAAC;gBACxB,CAAC,CAAC,CAAC;gBACH,YAAU,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACrC,CAAC;QACL,CAAC;;;OAxCA;IA8CM,4BAAO,GAAd;QAEI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IACxB,CAAC;IACL,iBAAC;AAAD,CAAC,AAvGD,IAuGC","sourcesContent":["import Filter from \"./filters/Filter\";\n\n/**\n * Abstract class which SoundNodes and SoundContext\n * both extend. This provides the functionality for adding\n * dynamic filters.\n * @class Filterable\n * @memberof PIXI.sound\n * @param {AudioNode} source The source audio node\n * @param {AudioNode} destination The output audio node\n */\nexport default class Filterable\n{\n    /**\n     * Get the gain node\n     * @name PIXI.sound.Filterable#_input\n     * @type {AudioNode}\n     * @private\n     */\n    private _input: AudioNode;\n\n    /**\n     * The destination output audio node\n     * @name PIXI.sound.Filterable#_output\n     * @type {AudioNode}\n     * @private\n     */\n    private _output: AudioNode;\n\n    /**\n     * Collection of filters.\n     * @name PIXI.sound.Filterable#_filters\n     * @type {PIXI.sound.filters.Filter[]}\n     * @private\n     */\n    private _filters: Filter[];\n\n    constructor(input: AudioNode, output: AudioNode)\n    {\n        this._output = output;\n        this._input = input;\n    }\n\n    /**\n     * The destination output audio node\n     * @name PIXI.sound.Filterable#destination\n     * @type {AudioNode}\n     * @readOnly\n     */\n    get destination(): AudioNode\n    {\n        return this._input;\n    }\n\n    /**\n     * The collection of filters\n     * @name PIXI.sound.Filterable#filters\n     * @type {PIXI.sound.filters.Filter[]}\n     */\n    get filters(): Filter[]\n    {\n        return this._filters;\n    }\n    set filters(filters: Filter[])\n    {\n        if (this._filters)\n        {\n            this._filters.forEach((filter: Filter) => {\n                if (filter)\n                {\n                    filter.disconnect();\n                }\n            });\n            this._filters = null;\n            // Reconnect direct path\n            this._input.connect(this._output);\n        }\n\n        if (filters && filters.length)\n        {\n            this._filters = filters.slice(0);\n\n            // Disconnect direct path before inserting filters\n            this._input.disconnect();\n\n            // Connect each filter\n            let prevFilter: Filter = null;\n            filters.forEach((filter: Filter) => {\n                if (prevFilter === null)\n                {\n                    // first filter is the destination\n                    // for the analyser\n                    this._input.connect(filter.destination);\n                }\n                else\n                {\n                    prevFilter.connect(filter.destination);\n                }\n                prevFilter = filter;\n            });\n            prevFilter.connect(this._output);\n        }\n    }\n\n    /**\n     * Cleans up.\n     * @method PIXI.sound.Filterable#destroy\n     */\n    public destroy(): void\n    {\n        this.filters = null;\n        this._input = null;\n        this._output = null;\n    }\n}\n"]}
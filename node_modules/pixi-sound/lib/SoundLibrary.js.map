{"version":3,"file":"SoundLibrary.js","sourceRoot":"","sources":["../src/SoundLibrary.ts"],"names":[],"mappings":"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","sourcesContent":["import Filterable from \"./Filterable\";\nimport * as filters from \"./filters\";\nimport Filter from \"./filters/Filter\";\nimport {CompleteCallback, Options, PlayOptions} from \"./Sound\";\nimport Sound from \"./Sound\";\nimport SoundContext from \"./SoundContext\";\nimport SoundInstance from \"./SoundInstance\";\nimport SoundSprite from \"./SoundSprite\";\nimport SoundUtils from \"./SoundUtils\";\n\nexport type SoundMap = {[id: string]: Options|string|ArrayBuffer};\n\n/**\n * @description Manages the playback of sounds.\n * @class SoundLibrary\n * @memberof PIXI.sound\n * @private\n */\nexport default class SoundLibrary\n{\n    // These are already documented else where\n    public Sound: typeof Sound;\n    public SoundInstance: typeof SoundInstance;\n    public SoundLibrary: typeof SoundLibrary;\n    public SoundSprite: typeof SoundSprite;\n    public Filterable: typeof Filterable;\n    public filters: typeof filters;\n    public utils: typeof SoundUtils;\n\n    /**\n     * The global context to use.\n     * @name PIXI.sound#_context\n     * @type {PIXI.sound.SoundContext}\n     * @private\n     */\n    private _context: SoundContext;\n\n    /**\n     * The map of all sounds by alias.\n     * @name PIXI.sound#_sounds\n     * @type {Object}\n     * @private\n     */\n    private _sounds: {[id: string]: Sound};\n\n    constructor()\n    {\n        if (this.supported)\n        {\n            this._context = new SoundContext();\n        }\n        this._sounds = {};\n        this.utils = SoundUtils;\n        this.filters = filters;\n        this.Sound = Sound;\n        this.SoundInstance = SoundInstance;\n        this.SoundLibrary = SoundLibrary;\n        this.SoundSprite = SoundSprite;\n        this.Filterable = Filterable;\n    }\n\n    /**\n     * The global context to use.\n     * @name PIXI.sound#context\n     * @readOnly\n     * @type {PIXI.sound.SoundContext}\n     */\n    public get context(): SoundContext\n    {\n        return this._context;\n    }\n\n    /**\n     * Apply filters to all sounds. Can be useful\n     * for setting global planning or global effects.\n     * @example\n     * // Adds a filter to pan all output left\n     * PIXI.sound.filtersAll = [\n     *     new PIXI.sound.filters.StereoFilter(-1)\n     * ];\n     * @name PIXI.sound#filtersAll\n     * @type {PIXI.sound.filters.Filter[]}\n     */\n    public get filtersAll(): Filter[]\n    {\n        return this._context.filters;\n    }\n    public set filtersAll(filters: Filter[])\n    {\n        this._context.filters = filters;\n    }\n\n    /**\n     * WebAudio is supported on the current browser.\n     * @name PIXI.sound#supported\n     * @readOnly\n     * @type {Boolean}\n     */\n    public get supported(): boolean\n    {\n        return SoundContext.AudioContext !== null;\n    }\n\n    /**\n     * Register an existing sound with the library cache.\n     * @method PIXI.sound#add\n     * @param {String} alias The sound alias reference.\n     * @param {PIXI.sound.Sound} sound Sound reference to use.\n     * @return {PIXI.sound.Sound} Instance of the Sound object.\n     */\n\n    /**\n     * Adds a new sound by alias.\n     * @method PIXI.sound#add\n     * @param {String} alias The sound alias reference.\n     * @param {ArrayBuffer|String|Object} options Either the path or url to the source file.\n     *        or the object of options to use.\n     * @param {ArrayBuffer|String} [options.src] If `options` is an object, the source of file.\n     * @param {Boolean} [options.autoPlay=false] true to play after loading.\n     * @param {Boolean} [options.preload=false] true to immediately start preloading.\n     * @param {Boolean} [options.singleInstance=false] `true` to disallow playing multiple layered instances at once.\n     * @param {Number} [options.volume=1] The amount of volume 1 = 100%.\n     * @param {Number} [options.speed=1] The playback rate where 1 is 100% speed.\n     * @param {Boolean} [options.useXHR=true] true to use XMLHttpRequest to load the sound. Default is false,\n     *        loaded with NodeJS's `fs` module.\n     * @param {Object} [options.sprites] The map of sprite data. Where a sprite is an object\n     *        with a `start` and `end`, which are the times in seconds. Optionally, can include\n     *        a `speed` amount where 1 is 100% speed.\n     * @param {PIXI.sound.Sound~completeCallback} [options.complete=null] Global complete callback when\n     *        play is finished.\n     * @param {PIXI.sound.Sound~loadedCallback} [options.loaded=null] Call when finished loading.\n     * @return {PIXI.sound.Sound} Instance of the Sound object.\n     */\n    public add(alias: string, options: Options|string|ArrayBuffer|Sound): Sound;\n\n    /**\n     * Adds multiple sounds at once.\n     * @method PIXI.sound#add\n     * @param {Object} map Map of sounds to add, the key is the alias, the value is the\n     *        string, ArrayBuffer or the list of options (see `add` method for options).\n     * @param {Object|String|ArrayBuffer} globalOptions The default options for all sounds.\n     *        if a property is defined, it will use the local property instead.\n     * @return {PIXI.sound.Sound} Instance to the Sound object.\n     */\n    public add(map: SoundMap, globalOptions?: Options): {[id: string]: Sound};\n\n    // Actual method\n    public add(source: string|SoundMap, sourceOptions?: Options|string|ArrayBuffer|Sound): {[id: string]: Sound}|Sound\n    {\n        if (typeof source === \"object\")\n        {\n            const results: {[id: string]: Sound} = {};\n\n            for (const alias in source)\n            {\n                const options: Options = this._getOptions(\n                    source[alias],\n                    sourceOptions as Options,\n                );\n                results[alias] = this.add(alias, options);\n            }\n            return results;\n        }\n        else if (typeof source === \"string\")\n        {\n            // @if DEBUG\n            console.assert(!this._sounds[source], `Sound with alias ${source} already exists.`);\n            // @endif\n\n            if (sourceOptions instanceof Sound)\n            {\n                this._sounds[source] = sourceOptions;\n                return sourceOptions;\n            }\n            else\n            {\n                const options: Options = this._getOptions(sourceOptions);\n                const sound: Sound = new Sound(this.context, options);\n                this._sounds[source] = sound;\n                return sound;\n            }\n        }\n    }\n\n    /**\n     * Internal methods for getting the options object\n     * @method PIXI.sound#_getOptions\n     * @private\n     * @param {string|ArrayBuffer|Object} source The source options\n     * @param {Object} [overrides] Override default options\n     * @return {Object} The construction options\n     */\n    private _getOptions(source: string|ArrayBuffer|Options, overrides?: Options): Options\n    {\n        let options: Options;\n\n        if (typeof source === \"string\")\n        {\n            options = { src: source };\n        }\n        else if (source instanceof ArrayBuffer)\n        {\n            options = { srcBuffer: source };\n        }\n        else\n        {\n            options = source as Options;\n        }\n        return Object.assign(options, overrides || {}) as Options;\n    }\n\n    /**\n     * Removes a sound by alias.\n     * @method PIXI.sound#remove\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public remove(alias: string): SoundLibrary\n    {\n        this.exists(alias, true);\n        this._sounds[alias].destroy();\n        delete this._sounds[alias];\n        return this;\n    }\n\n    /**\n     * Set the global volume for all sounds. To set per-sound volume see {@link PIXI.sound#volume}.\n     * @name PIXI.sound#volumeAll\n     * @type {Number}\n     */\n    public get volumeAll(): number\n    {\n        return this._context.volume;\n    }\n    public set volumeAll(volume: number)\n    {\n        this._context.volume = volume;\n    }\n\n    /**\n     * Pauses any playing sounds.\n     * @method PIXI.sound#pauseAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public pauseAll(): SoundLibrary\n    {\n        this._context.paused = true;\n        return this;\n    }\n\n    /**\n     * Resumes any sounds.\n     * @method PIXI.sound#resumeAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public resumeAll(): SoundLibrary\n    {\n        this._context.paused = false;\n        return this;\n    }\n\n    /**\n     * Mutes all playing sounds.\n     * @method PIXI.sound#muteAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public muteAll(): SoundLibrary\n    {\n        this._context.muted = true;\n        return this;\n    }\n\n    /**\n     * Unmutes all playing sounds.\n     * @method PIXI.sound#unmuteAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public unmuteAll(): SoundLibrary\n    {\n        this._context.muted = false;\n        return this;\n    }\n\n    /**\n     * Stops and removes all sounds. They cannot be used after this.\n     * @method PIXI.sound#removeAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public removeAll(): SoundLibrary\n    {\n        for (const alias in this._sounds)\n        {\n            this._sounds[alias].destroy();\n            delete this._sounds[alias];\n        }\n        return this;\n    }\n\n    /**\n     * Stops all sounds.\n     * @method PIXI.sound#stopAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public stopAll(): SoundLibrary\n    {\n        for (const alias in this._sounds)\n        {\n            this._sounds[alias].stop();\n        }\n        return this;\n    }\n\n    /**\n     * Checks if a sound by alias exists.\n     * @method PIXI.sound#exists\n     * @param {String} alias Check for alias.\n     * @return {Boolean} true if the sound exists.\n     */\n    public exists(alias: string, assert: boolean= false): boolean\n    {\n        const exists = !!this._sounds[alias];\n        if (assert)\n        {\n            console.assert(exists, `No sound matching alias '${alias}'.`);\n        }\n        return exists;\n    }\n\n    /**\n     * Find a sound by alias.\n     * @method PIXI.sound#find\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound.Sound} Sound object.\n     */\n    public find(alias: string): Sound\n    {\n        this.exists(alias, true);\n        return this._sounds[alias];\n    }\n\n    /**\n     * Plays a sound.\n     * @method PIXI.sound#play\n     * @param {String} alias The sound alias reference.\n     * @param {String} sprite The alias of the sprite to play.\n     * @return {PIXI.sound.SoundInstance|null} The sound instance, this cannot be reused\n     *         after it is done playing. Returns `null` if the sound has not yet loaded.\n     */\n\n    /**\n     * Plays a sound.\n     * @method PIXI.sound#play\n     * @param {String} alias The sound alias reference.\n     * @param {Object|Function} options The options or callback when done.\n     * @param {Function} [options.complete] When completed.\n     * @param {Function} [options.loaded] If not already preloaded, callback when finishes load.\n     * @param {Number} [options.start=0] Start time offset.\n     * @param {Number} [options.end] End time offset.\n     * @param {Number} [options.speed] Override default speed, default to the Sound's speed setting.\n     * @param {Boolean} [options.loop] Override default loop, default to the Sound's loop setting.\n     * @return {PIXI.sound.SoundInstance|Promise<PIXI.sound.SoundInstance>} The sound instance,\n     *        this cannot be reused after it is done playing. Returns a Promise if the sound\n     *        has not yet loaded.\n     */\n    public play(alias: string, options?: PlayOptions|CompleteCallback|string): SoundInstance|Promise<SoundInstance>\n    {\n        return this.find(alias).play(options);\n    }\n\n    /**\n     * Stops a sound.\n     * @method PIXI.sound#stop\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound.Sound} Sound object.\n     */\n    public stop(alias: string): Sound\n    {\n        return this.find(alias).stop();\n    }\n\n    /**\n     * Pauses a sound.\n     * @method PIXI.sound#pause\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound.Sound} Sound object.\n     */\n    public pause(alias: string): Sound\n    {\n        return this.find(alias).pause();\n    }\n\n    /**\n     * Resumes a sound.\n     * @method PIXI.sound#resume\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public resume(alias: string): Sound\n    {\n        return this.find(alias).resume();\n    }\n\n    /**\n     * Get or set the volume for a sound.\n     * @method PIXI.sound#volume\n     * @param {String} alias The sound alias reference.\n     * @param {Number} [volume] Optional current volume to set.\n     * @return {Number} The current volume.\n     */\n    public volume(alias: string, volume?: number): number\n    {\n        const sound = this.find(alias);\n        if (volume !== undefined) {\n            sound.volume = volume;\n        }\n        return sound.volume;\n    }\n\n    /**\n     * Get the length of a sound in seconds.\n     * @method PIXI.sound#duration\n     * @param {String} alias The sound alias reference.\n     * @return {Number} The current duration in seconds.\n     */\n    public duration(alias: string): number\n    {\n        return this.find(alias).duration;\n    }\n\n    /**\n     * Destroys the sound module.\n     * @method PIXI.sound#destroy\n     * @private\n     */\n    public destroy(): void\n    {\n        this.removeAll();\n        this._sounds = null;\n        this._context = null;\n    }\n}\n"]}
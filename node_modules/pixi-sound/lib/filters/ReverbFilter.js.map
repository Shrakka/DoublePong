{"version":3,"file":"ReverbFilter.js","sourceRoot":"","sources":["../../src/filters/ReverbFilter.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,mCAA8B;AAC9B,kCAAoC;AAYpC;IAA0C,gCAAM;IA+B5C,sBAAY,OAAkB,EAAE,KAAgB,EAAE,OAAuB;QAA7D,wBAAA,EAAA,WAAkB;QAAE,sBAAA,EAAA,SAAgB;QAAE,wBAAA,EAAA,eAAuB;QAAzE,iBAWC;QATG,IAAM,SAAS,GAAiB,eAAY,CAAC,OAAO,CAAC,YAAY,CAAC,eAAe,EAAE,CAAC;QAEpF,QAAA,kBAAM,SAAS,CAAC,SAAC;QAEjB,KAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,KAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5C,KAAI,CAAC,MAAM,GAAG,KAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;QACzC,KAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,KAAI,CAAC,QAAQ,EAAE,CAAC;;IACpB,CAAC;IAWO,6BAAM,GAAd,UAAe,KAAY,EAAE,GAAU,EAAE,GAAU;QAE/C,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;IAC/C,CAAC;IAQD,sBAAI,iCAAO;aAAX;YAEI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACzB,CAAC;aACD,UAAY,OAAc;YAEtB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5C,IAAI,CAAC,QAAQ,EAAE,CAAC;QACpB,CAAC;;;OALA;IAaD,sBAAI,+BAAK;aAAT;YAEI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACvB,CAAC;aACD,UAAU,KAAY;YAElB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;YACzC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACpB,CAAC;;;OALA;IAaD,sBAAI,iCAAO;aAAX;YAEI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACzB,CAAC;aACD,UAAY,OAAe;YAEvB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;YACxB,IAAI,CAAC,QAAQ,EAAE,CAAC;QACpB,CAAC;;;OALA;IAaO,+BAAQ,GAAhB;QAEI,IAAM,OAAO,GAAG,eAAY,CAAC,OAAO,CAAC,YAAY,CAAC;QAClD,IAAM,IAAI,GAAU,OAAO,CAAC,UAAU,CAAC;QACvC,IAAM,MAAM,GAAU,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC3C,IAAM,OAAO,GAAe,OAAO,CAAC,YAAY,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;QAClE,IAAM,QAAQ,GAAgB,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QACxD,IAAM,QAAQ,GAAgB,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QACxD,IAAI,CAAQ,CAAC;QAEb,GAAG,CAAC,CAAC,IAAI,CAAC,GAAU,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EACtC,CAAC;YACG,CAAC,GAAG,IAAI,CAAC,QAAQ,GAAG,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;YACnC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC9E,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAClF,CAAC;QACD,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,OAAO,CAAC;IACrC,CAAC;IAED,8BAAO,GAAP;QAEI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,iBAAM,OAAO,WAAE,CAAC;IACpB,CAAC;IACL,mBAAC;AAAD,CAAC,AAxID,CAA0C,gBAAM,GAwI/C","sourcesContent":["import Filter from './Filter';\nimport soundLibrary from '../index';\n\n/**\n * Filter for adding reverb. Refactored from \n * https://github.com/web-audio-components/simple-reverb/\n *\n * @class ReverbFilter\n * @memberof PIXI.sound.filters\n * @param {Number} [seconds=3] Seconds for reverb\n * @param {Number} [decay=2] The decay length\n * @param {Boolean} [reverse=false] Reverse reverb\n */\nexport default class ReverbFilter extends Filter\n{\n    /**\n     * The covolver node\n     * @name PIXI.sound.filters.ReverbFilter#_convolver\n     * @type {ConvolverNode}\n     * @private\n     */\n    private _convolver:ConvolverNode;\n\n    /**\n     * @name PIXI.sound.filters.ReverbFilter#_seconds\n     * @type {Number}\n     * @private\n     */\n    private _seconds:number;\n\n    /**\n     * @name PIXI.sound.filters.ReverbFilter#_decay\n     * @type {Number}\n     * @private\n     */\n    private _decay:number;\n\n    /**\n     * @name PIXI.sound.filters.ReverbFilter#_reverse\n     * @type {Number}\n     * @private\n     */\n    private _reverse:boolean;\n\n    constructor(seconds:number = 3, decay:number = 2, reverse:boolean = false)\n    {\n        const convolver:ConvolverNode = soundLibrary.context.audioContext.createConvolver();\n\n        super(convolver);\n\n        this._convolver = convolver;\n        this._seconds = this._clamp(seconds, 1, 50);\n        this._decay = this._clamp(decay, 0, 100);\n        this._reverse = reverse;\n        this._rebuild();\n    }\n\n    /**\n     * Clamp a value\n     * @method PIXI.sound.filters.ReverbFilter#_clamp \n     * @private\n     * @param {Number} value\n     * @param {Number} min Minimum value\n     * @param {Number} max Maximum value\n     * @return {Number} Clamped number\n     */\n    private _clamp(value:number, min:number, max:number): number\n    {\n        return Math.min(max, Math.max(min, value));\n    }\n\n    /**\n     * Decay value from 1 to 50\n     * @name PIXI.sound.filters.ReverbFilter#decay\n     * @type {Number}\n     * @default 3\n     */\n    get seconds():number\n    {\n        return this._seconds;\n    }\n    set seconds(seconds:number)\n    {\n        this._seconds = this._clamp(seconds, 1, 50);\n        this._rebuild();\n    }\n\n    /**\n     * Decay value from 0 to 100\n     * @name PIXI.sound.filters.ReverbFilter#decay\n     * @type {Number}\n     * @default 2\n     */\n    get decay():number\n    {\n        return this._decay;\n    }\n    set decay(decay:number)\n    {\n        this._decay = this._clamp(decay, 0, 100);\n        this._rebuild();\n    }\n\n    /**\n     * Reverse value from 0 to 1\n     * @name PIXI.sound.filters.ReverbFilter#reverse\n     * @type {Boolean}\n     * @default false\n     */\n    get reverse():boolean\n    {\n        return this._reverse;\n    }\n    set reverse(reverse:boolean)\n    {\n        this._reverse = reverse;\n        this._rebuild();\n    }\n\n    /**\n     * Utility function for building an impulse response\n     * from the module parameters.\n     * @method PIXI.sound.filters.ReverbFilter#_rebuild\n     * @private\n     */\n    private _rebuild(): void\n    {\n        const context = soundLibrary.context.audioContext;\n        const rate:number = context.sampleRate;\n        const length:number = rate * this._seconds;\n        const impulse:AudioBuffer = context.createBuffer(2, length, rate);\n        const impulseL:Float32Array = impulse.getChannelData(0);\n        const impulseR:Float32Array = impulse.getChannelData(1);\n        let n:number;\n\n        for (let i:number = 0; i < length; i++)\n        {\n            n = this._reverse ? length - i : i;\n            impulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, this._decay);\n            impulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, this._decay);\n        }\n        this._convolver.buffer = impulse;\n    }\n\n    destroy(): void\n    {\n        this._convolver = null;\n        super.destroy();\n    }\n}\n"]}
{"version":3,"file":"StereoFilter.js","sourceRoot":"","sources":["../../src/filters/StereoFilter.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,mCAA8B;AAC9B,kCAAoC;AASpC;IAA0C,gCAAM;IA0B5C,sBAAY,GAAc;QAAd,oBAAA,EAAA,OAAc;QAA1B,iBAyBC;QAvBG,IAAI,MAAuB,CAAC;QAC5B,IAAI,MAAiB,CAAC;QACtB,IAAI,WAAqB,CAAC;QAC1B,IAAM,YAAY,GAAG,eAAY,CAAC,OAAO,CAAC,YAAY,CAAC;QAEvD,EAAE,CAAC,CAAC,YAAY,CAAC,kBAAkB,CAAC,CACpC,CAAC;YACG,MAAM,GAAG,YAAY,CAAC,kBAAkB,EAAE,CAAC;YAC3C,WAAW,GAAG,MAAM,CAAC;QACzB,CAAC;QACD,IAAI,CACJ,CAAC;YACG,MAAM,GAAG,YAAY,CAAC,YAAY,EAAE,CAAC;YACrC,MAAM,CAAC,YAAY,GAAG,YAAY,CAAC;YACnC,WAAW,GAAG,MAAM,CAAC;QACzB,CAAC;QAED,QAAA,kBAAM,WAAW,CAAC,SAAC;QAEnB,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAEtB,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;IACnB,CAAC;IAOD,sBAAI,6BAAG;aAYP;YAEI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACrB,CAAC;aAfD,UAAQ,KAAY;YAEhB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;YAClB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CACjB,CAAC;gBACG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC;YACnC,CAAC;YACD,IAAI,CACJ,CAAC;gBACG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;YAC5D,CAAC;QACL,CAAC;;;OAAA;IAMD,8BAAO,GAAP;QAEI,iBAAM,OAAO,WAAE,CAAC;QAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IACxB,CAAC;IACL,mBAAC;AAAD,CAAC,AAjFD,CAA0C,gBAAM,GAiF/C","sourcesContent":["import Filter from './Filter';\nimport soundLibrary from '../index';\n\n/**\n * Filter for adding Stereo panning.\n *\n * @class StereoFilter\n * @memberof PIXI.sound.filters\n * @param {Number} [pan=0] The amount of panning, -1 is left, 1 is right, 0 is centered.\n */\nexport default class StereoFilter extends Filter\n{\n    /**\n     * The stereo panning node\n     * @name PIXI.sound.filters.StereoFilter#_stereo\n     * @type {StereoPannerNode}\n     * @private\n     */\n    private _stereo:StereoPannerNode;\n\n    /**\n     * The stereo panning node\n     * @name PIXI.sound.filters.StereoFilter#_panner\n     * @type {PannerNode}\n     * @private\n     */\n    private _panner:PannerNode;\n\n    /**\n     * The amount of panning, -1 is left, 1 is right, 0 is centered\n     * @name PIXI.sound.filters.StereoFilter#_pan\n     * @type {Number}\n     * @private\n     */\n    private _pan:number;\n\n    constructor(pan:number = 0)\n    {\n        let stereo:StereoPannerNode;\n        let panner:PannerNode;\n        let destination:AudioNode;\n        const audioContext = soundLibrary.context.audioContext;\n\n        if (audioContext.createStereoPanner)\n        {\n            stereo = audioContext.createStereoPanner();\n            destination = stereo;\n        }\n        else\n        {\n            panner = audioContext.createPanner();\n            panner.panningModel = 'equalpower';\n            destination = panner;\n        }\n\n        super(destination);\n\n        this._stereo = stereo;\n        this._panner = panner;\n\n        this.pan = pan;\n    }\n\n    /**\n     * Set the amount of panning, where -1 is left, 1 is right, and 0 is centered\n     * @name PIXI.sound.filters.StereoFilter#pan\n     * @type {Number}\n     */\n    set pan(value:number)\n    {\n        this._pan = value;\n        if (this._stereo)\n        {\n            this._stereo.pan.value = value;\n        }\n        else\n        {\n            this._panner.setPosition(value, 0, 1 - Math.abs(value));\n        }\n    }\n    get pan(): number\n    {\n        return this._pan;\n    }\n\n    destroy(): void\n    {\n        super.destroy();\n        this._stereo = null;\n        this._panner = null;\n    }\n}\n"]}
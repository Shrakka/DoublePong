{"version":3,"file":"EqualizerFilter.js","sourceRoot":"","sources":["../../src/filters/EqualizerFilter.ts"],"names":[],"mappings":"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","sourcesContent":["import Filter from './Filter';\nimport soundLibrary from '../index';\n\ninterface Band {\n    f:number;\n    type:string;\n    gain:number;\n}\n\n/**\n * Filter for adding equalizer bands.\n *\n * @class EqualizerFilter\n * @memberof PIXI.sound.filters\n * @param {number} [f32=0] Default gain for 32 Hz\n * @param {number} [f64=0] Default gain for 64 Hz\n * @param {number} [f125=0] Default gain for 125 Hz\n * @param {number} [f250=0] Default gain for 250 Hz\n * @param {number} [f500=0] Default gain for 500 Hz\n * @param {number} [f1k=0] Default gain for 1000 Hz\n * @param {number} [f2k=0] Default gain for 2000 Hz\n * @param {number} [f4k=0] Default gain for 4000 Hz\n * @param {number} [f8k=0] Default gain for 8000 Hz\n * @param {number} [f16k=0] Default gain for 16000 Hz\n */\nexport default class EqualizerFilter extends Filter\n{\n    /**\n     * Band at 32 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F32\n     * @type {Number}\n     * @readOnly\n     */\n    public static F32:number = 32;\n\n    /**\n     * Band at 64 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F64\n     * @type {Number}\n     * @readOnly\n     */\n    public static F64:number = 64;\n    \n    /**\n     * Band at 125 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F125\n     * @type {Number}\n     * @readOnly\n     */\n    public static F125:number = 125;\n    \n    /**\n     * Band at 250 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F250\n     * @type {Number}\n     * @readOnly\n     */\n    public static F250:number = 250;\n    \n    /**\n     * Band at 500 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F500\n     * @type {Number}\n     * @readOnly\n     */\n    public static F500:number = 500;\n    \n    /**\n     * Band at 1000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F1K\n     * @type {Number}\n     * @readOnly\n     */\n    public static F1K:number = 1000;\n    \n    /**\n     * Band at 2000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F2K\n     * @type {Number}\n     * @readOnly\n     */\n    public static F2K:number = 2000;\n    \n    /**\n     * Band at 4000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F4K\n     * @type {Number}\n     * @readOnly\n     */\n    public static F4K:number = 4000;\n    \n    /**\n     * Band at 8000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F8K\n     * @type {Number}\n     * @readOnly\n     */\n    public static F8K:number = 8000;\n    \n    /**\n     * Band at 16000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F16K\n     * @type {Number}\n     * @readOnly\n     */\n    public static F16K:number = 16000;\n\n    /**\n     * The list of bands \n     * @name PIXI.sounds.filters.EqualizerFilter#bands\n     * @type {BiquadFilterNode[]}\n     * @readOnly\n     */\n    public bands:BiquadFilterNode[];\n\n    /**\n     * The map of bands to frequency\n     * @name PIXI.sounds.filters.EqualizerFilter#bandsMap\n     * @type {Object}\n     * @readOnly\n     */\n    public bandsMap:{[id:number]:BiquadFilterNode};\n\n    constructor(f32:number = 0, f64:number = 0, f125:number = 0, f250:number = 0, f500:number = 0,\n        f1k:number = 0, f2k:number = 0, f4k:number = 0, f8k:number = 0, f16k:number = 0)\n    {\n        const equalizerBands:Band[] = [\n            {\n                f: EqualizerFilter.F32,\n                type: 'lowshelf',\n                gain: f32\n            },\n            {\n                f: EqualizerFilter.F64,\n                type: 'peaking',\n                gain: f64\n            },\n            {\n                f: EqualizerFilter.F125,\n                type: 'peaking',\n                gain: f125\n            },\n            {\n                f: EqualizerFilter.F250,\n                type: 'peaking',\n                gain: f250\n            },\n            {\n                f: EqualizerFilter.F500,\n                type: 'peaking',\n                gain: f500\n            },\n            {\n                f: EqualizerFilter.F1K,\n                type: 'peaking',\n                gain: f1k\n            },\n            {\n                f: EqualizerFilter.F2K,\n                type: 'peaking',\n                gain: f2k\n            },\n            {\n                f: EqualizerFilter.F4K,\n                type: 'peaking',\n                gain: f4k\n            },\n            {\n                f: EqualizerFilter.F8K,\n                type: 'peaking',\n                gain: f8k\n            },\n            {\n                f: EqualizerFilter.F16K,\n                type: 'highshelf',\n                gain: f16k\n            }\n        ];\n\n        \n        const bands:BiquadFilterNode[] = equalizerBands.map(function (band:Band)\n        {\n            const filter:BiquadFilterNode = soundLibrary.context.audioContext.createBiquadFilter();\n            filter.type = band.type as BiquadFilterType;\n            filter.gain.value = band.gain;\n            filter.Q.value = 1;\n            filter.frequency.value = band.f;\n            return filter;\n        });\n\n        // Setup the constructor AudioNode, where first is the input, and last is the output\n        super(bands[0], bands[bands.length - 1]);\n\n        // Manipulate the bands\n        this.bands = bands;\n\n        // Create a map\n        this.bandsMap = {};\n\n        for (let i = 0; i < this.bands.length; i++)\n        {\n            const node:BiquadFilterNode = this.bands[i];\n\n            // Connect the previous band to the current one\n            if (i > 0)\n            {\n                this.bands[i - 1].connect(node);\n            }\n            this.bandsMap[node.frequency.value] = node;\n        }\n    }\n\n    /**\n     * Set gain on a specific frequency.\n     * @method PIXI.sound.filters.EqualizerFilter#setGain\n     * @param {number} frequency The frequency, see EqualizerFilter.F* for bands\n     * @param {number} [gain=0] Recommended -40 to 40.\n     */\n    setGain(frequency:number, gain:number = 0): void\n    {\n        if (!this.bandsMap[frequency])\n        {\n            throw 'No band found for frequency ' + frequency;\n        }\n        this.bandsMap[frequency].gain.value = gain;\n    }\n\n    /**\n     * Reset all frequency bands to have gain of 0\n     * @method PIXI.sound.filters.EqualizerFilter#reset\n     */\n    reset(): void\n    {\n        this.bands.forEach((band:BiquadFilterNode) => {\n            band.gain.value = 0;\n        });\n    }\n\n    destroy(): void\n    {\n        this.bands.forEach((band:BiquadFilterNode) => {\n            band.disconnect();\n        });\n        this.bands = null;\n        this.bandsMap = null;\n    }\n}\n"]}
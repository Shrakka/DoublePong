{"version":3,"file":"DistortionFilter.js","sourceRoot":"","sources":["../../src/filters/DistortionFilter.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,mCAA8B;AAC9B,kCAAoC;AASpC;IAA8C,oCAAM;IAkBhD,0BAAY,MAAiB;QAAjB,uBAAA,EAAA,UAAiB;QAA7B,iBASC;QAPG,IAAM,UAAU,GAAkB,eAAY,CAAC,OAAO,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAC;QAEvF,QAAA,kBAAM,UAAU,CAAC,SAAC;QAElB,KAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAE9B,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;;IACzB,CAAC;IAMD,sBAAI,oCAAM;aAmBV;YAEI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACxB,CAAC;aAtBD,UAAW,KAAY;YAEnB,KAAK,IAAI,IAAI,CAAC;YACd,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAM,OAAO,GAAU,KAAK,CAAC;YAC7B,IAAM,KAAK,GAAgB,IAAI,YAAY,CAAC,OAAO,CAAC,CAAC;YACrD,IAAM,GAAG,GAAU,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC;YAEjC,IAAI,CAAC,GAAU,CAAC,CAAC;YACjB,IAAI,CAAQ,CAAC;YAEb,GAAG,CAAC,CAAC,EAAG,CAAC,GAAG,OAAO,EAAE,EAAE,CAAC,EACxB,CAAC;gBACG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,CAAC;gBACxB,KAAK,CAAC,CAAC,CAAC,GAAG,CAAE,CAAC,GAAG,KAAK,CAAE,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,CAAE,IAAI,CAAC,EAAE,GAAG,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAE,CAAC;YAChF,CAAC;YACD,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG,KAAK,CAAC;YAC/B,IAAI,CAAC,WAAW,CAAC,UAAU,GAAG,IAAI,CAAC;QACvC,CAAC;;;OAAA;IAMD,kCAAO,GAAP;QAEI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,iBAAM,OAAO,WAAE,CAAC;IACpB,CAAC;IACL,uBAAC;AAAD,CAAC,AA9DD,CAA8C,gBAAM,GA8DnD","sourcesContent":["import Filter from './Filter';\nimport soundLibrary from '../index';\n\n/**\n * Filter for adding adding delaynode.\n *\n * @class DistortionFilter\n * @memberof PIXI.sound.filters\n * @param {Number} [amount=0] The amount of distoration from 0 to 1.\n */\nexport default class DistortionFilter extends Filter\n{\n    /**\n     * The Wave shape node use to distort\n     * @name PIXI.sound.filters.DistortionFilter#_distortion\n     * @type {WaveShaperNode}\n     * @private\n     */\n    private _distortion:WaveShaperNode;\n\n    /**\n     * The amount of distoration\n     * @name PIXI.sound.filters.DistortionFilter#_amount\n     * @type {Number}\n     * @private\n     */\n    private _amount:number;\n\n    constructor(amount:number = 0)\n    {\n        const distortion:WaveShaperNode = soundLibrary.context.audioContext.createWaveShaper();\n\n        super(distortion);\n\n        this._distortion = distortion;\n\n        this.amount = amount;\n    }\n\n    /**\n     * @name PIXI.sound.filters.Distoration#amount\n     * @type {Number}\n     */\n    set amount(value:number)\n    {\n        value *= 1000;\n        this._amount = value;\n        const samples:number = 44100;\n        const curve:Float32Array = new Float32Array(samples);\n        const deg:number = Math.PI / 180;\n\n        let i:number = 0;\n        let x:number;\n\n        for ( ; i < samples; ++i )\n        {\n            x = i * 2 / samples - 1;\n            curve[i] = ( 3 + value ) * x * 20 * deg / ( Math.PI + value * Math.abs(x) );\n        }\n        this._distortion.curve = curve;\n        this._distortion.oversample = '4x';\n    }\n    get amount(): number\n    {\n        return this._amount;\n    }\n\n    destroy(): void\n    {\n        this._distortion = null;\n        super.destroy();\n    }\n}\n"]}
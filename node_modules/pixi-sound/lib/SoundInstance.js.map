{"version":3,"file":"SoundInstance.js","sourceRoot":"","sources":["../src/SoundInstance.ts"],"names":[],"mappings":"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","sourcesContent":["import Sound from \"./Sound\";\n\nlet id = 0;\n\n/**\n * A single play instance that handles the AudioBufferSourceNode.\n * @class SoundInstance\n * @memberof PIXI.sound\n * @param {SoundNodes} source Reference to the SoundNodes.\n */\nexport default class SoundInstance extends PIXI.utils.EventEmitter\n{\n    /**\n     * Recycle instance, because they will be created many times.\n     * @type {Array}\n     * @name PIXI.sound.SoundInstance._pool\n     * @static\n     * @private\n     */\n    private static _pool: SoundInstance[] = [];\n\n    /**\n     * The current unique ID for this instance.\n     * @name PIXI.sound.SoundInstance#id\n     * @readOnly\n     */\n    public id: number;\n\n    /**\n     * The source Sound.\n     * @type {SoundNodes}\n     * @name PIXI.sound.SoundInstance#_parent\n     * @private\n     */\n    private _parent: Sound;\n\n    /**\n     * true if paused.\n     * @type {Boolean}\n     * @name PIXI.sound.SoundInstance#_paused\n     * @private\n     */\n    private _paused: boolean;\n\n    /**\n     * Last update frame number.\n     * @type {Number}\n     * @name PIXI.sound.SoundInstance#_lastUpdate\n     * @private\n     */\n    private _lastUpdate: number;\n\n    /**\n     * The total number of seconds elapsed in playback.\n     * @type {Number}\n     * @name PIXI.sound.SoundInstance#_elapsed\n     * @private\n     */\n    private _elapsed: number;\n\n    /**\n     * The number of time in seconds to fade in.\n     * @type {Number}\n     * @name PIXI.sound.SoundInstance#_fadeIn\n     * @private\n     */\n    private _fadeIn: number;\n\n    /**\n     * The number of time in seconds to fade out.\n     * @type {Number}\n     * @name PIXI.sound.SoundInstance#_fadeOut\n     * @private\n     */\n    private _fadeOut: number;\n\n    /**\n     * Playback rate, where 1 is 100%.\n     * @type {Number}\n     * @name PIXI.sound.SoundInstance#_speed\n     * @private\n     */\n    private _speed: number;\n\n    /**\n     * Playback rate, where 1 is 100%.\n     * @type {Number}\n     * @name PIXI.sound.SoundInstance#_end\n     * @private\n     */\n    private _end: number;\n\n    /**\n     * `true` if should be looping.\n     * @type {Boolean}\n     * @name PIXI.sound.SoundInstance#_loop\n     * @private\n     */\n    private _loop: boolean;\n\n    /**\n     * Length of the sound in seconds.\n     * @type {Number}\n     * @name PIXI.sound.SoundInstance#_duration\n     * @private\n     */\n    private _duration: number;\n\n    /**\n     * The progress of the sound from 0 to 1.\n     * @type {Number}\n     * @name PIXI.sound.SoundInstance#_progress\n     * @private\n     */\n    private _progress: number;\n\n    /**\n     * Audio buffer source clone from Sound object.\n     * @type {AudioBufferSourceNode}\n     * @name PIXI.sound.SoundInstance#_source\n     * @private\n     */\n    private _source: AudioBufferSourceNode;\n\n    /**\n     * Recycle instance, because they will be created many times.\n     * @method PIXI.sound.SoundInstance.create\n     * @static\n     * @private\n     * @param {PIXI.sound.Sound} parent Parent sound object\n     */\n    public static create(parent: Sound): SoundInstance\n    {\n        if (SoundInstance._pool.length > 0)\n        {\n            const sound = SoundInstance._pool.pop();\n            sound._init(parent);\n            return sound;\n        }\n        else\n        {\n            return new SoundInstance(parent);\n        }\n    }\n\n    constructor(parent: Sound)\n    {\n        super();\n\n        this.id = id++;\n        this._parent = null;\n        this._paused = false;\n        this._elapsed = 0;\n\n        // Initialize\n        this._init(parent);\n    }\n\n    /**\n     * Stops the instance, don't use after this.\n     * @method PIXI.sound.SoundInstance#stop\n     */\n    public stop(): void\n    {\n        if (this._source)\n        {\n            this._internalStop();\n\n            /**\n             * The sound is stopped. Don't use after this is called.\n             * @event PIXI.sound.SoundInstance#stop\n             */\n            this.emit(\"stop\");\n        }\n    }\n\n    /**\n     * Plays the sound.\n     * @method PIXI.sound.SoundInstance#play\n     * @param {Number} [start=0] The position to start playing, in seconds.\n     * @param {Number} [end] The ending position in seconds.\n     * @param {Number} [speed] Override the default speed.\n     * @param {Boolean} [loop] Override the default loop.\n     * @param {Number} [fadeIn] Time to fadein volume.\n     * @param {Number} [fadeOut] Time to fadeout volume.\n     */\n    public play(start: number, end: number, speed: number, loop: boolean, fadeIn: number, fadeOut: number): void\n    {\n        // @if DEBUG\n        if (end)\n        {\n            console.assert(end > start, \"End time is before start time\");\n        }\n        // @endif\n        this._paused = false;\n        this._source = this._parent.nodes.cloneBufferSource();\n        if (speed !== undefined)\n        {\n            this._source.playbackRate.value = speed;\n        }\n        this._speed = this._source.playbackRate.value;\n        if (loop !== undefined)\n        {\n            this._loop = this._source.loop = !!loop;\n        }\n        // WebAudio doesn't support looping when a duration is set\n        // we'll set this just for the heck of it\n        if (this._loop && end !== undefined)\n        {\n            // @if DEBUG\n            console.warn('Looping not support when specifying an \"end\" time');\n            // @endif\n            this._loop = this._source.loop = false;\n        }\n        this._end = end;\n\n        const duration: number = this._source.buffer.duration;\n\n        fadeIn = this._toSec(fadeIn);\n\n        // Clamp fadeIn to the duration\n        if (fadeIn > duration)\n        {\n            fadeIn = duration;\n        }\n\n        // Cannot fade out for looping sounds\n        if (!this._loop)\n        {\n            fadeOut = this._toSec(fadeOut);\n\n            // Clamp fadeOut to the duration + fadeIn\n            if (fadeOut > duration - fadeIn)\n            {\n                fadeOut = duration - fadeIn;\n            }\n        }\n\n        this._duration = duration;\n        this._fadeIn = fadeIn;\n        this._fadeOut = fadeOut;\n        this._lastUpdate = this._now();\n        this._elapsed = start;\n        this._source.onended = this._onComplete.bind(this);\n\n        if (end)\n        {\n            this._source.start(0, start, end - start);\n        }\n        else\n        {\n            this._source.start(0, start);\n        }\n\n        /**\n         * The sound is started.\n         * @event PIXI.sound.SoundInstance#start\n         */\n        this.emit(\"start\");\n\n        // Do an update for the initial progress\n        this._update(true);\n\n        // Start handling internal ticks\n        this._enabled = true;\n    }\n\n    /**\n     * Utility to convert time in millseconds or seconds\n     * @method PIXI.sound.SoundInstance#_toSec\n     * @private\n     * @param {Number} [time] Time in either ms or sec\n     * @return {Number} Time in seconds\n     */\n    private _toSec(time?: number): number\n    {\n        if (time > 10)\n        {\n            time /= 1000;\n        }\n        return time || 0;\n    }\n\n    /**\n     * Start the update progress.\n     * @name PIXI.sound.SoundInstance#_enabled\n     * @type {Boolean}\n     * @private\n     */\n    private set _enabled(enabled: boolean)\n    {\n        this._parent.nodes.script.onaudioprocess = !enabled ? null : () => {\n            this._update();\n        };\n    }\n\n    /**\n     * The current playback progress from 0 to 1.\n     * @type {Number}\n     * @name PIXI.sound.SoundInstance#progress\n     */\n    public get progress(): number\n    {\n        return this._progress;\n    }\n\n    /**\n     * Pauses the sound.\n     * @type {Boolean}\n     * @name PIXI.sound.SoundInstance#paused\n     */\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n\n    public set paused(paused: boolean)\n    {\n        if (paused !== this._paused)\n        {\n            this._paused = paused;\n\n            if (paused)\n            {\n                // pause the sounds\n                this._internalStop();\n\n                /**\n                 * The sound is paused.\n                 * @event PIXI.sound.SoundInstance#paused\n                 */\n                this.emit(\"paused\");\n            }\n            else\n            {\n                /**\n                 * The sound is unpaused.\n                 * @event PIXI.sound.SoundInstance#resumed\n                 */\n                this.emit(\"resumed\");\n\n                // resume the playing with offset\n                this.play(\n                    this._elapsed % this._duration,\n                    this._end,\n                    this._speed,\n                    this._loop,\n                    this._fadeIn,\n                    this._fadeOut,\n                );\n            }\n\n            /**\n             * The sound is paused or unpaused.\n             * @event PIXI.sound.SoundInstance#pause\n             * @property {Boolean} paused If the instance was paused or not.\n             */\n            this.emit(\"pause\", paused);\n        }\n    }\n\n    /**\n     * Don't use after this.\n     * @method PIXI.sound.SoundInstance#destroy\n     */\n    public destroy(): void\n    {\n        this.removeAllListeners();\n        this._internalStop();\n        this._source = null;\n        this._speed = 0;\n        this._end = 0;\n        this._parent = null;\n        this._elapsed = 0;\n        this._duration = 0;\n        this._loop = false;\n        this._fadeIn = 0;\n        this._fadeOut = 0;\n        this._paused = false;\n\n        // Add it if it isn't already added\n        if (SoundInstance._pool.indexOf(this) < 0)\n        {\n            SoundInstance._pool.push(this);\n        }\n    }\n\n    /**\n     * To string method for instance.\n     * @method PIXI.sound.SoundInstance#toString\n     * @return {String} The string representation of instance.\n     * @private\n     */\n    public toString(): string\n    {\n        return \"[SoundInstance id=\" + this.id + \"]\";\n    }\n\n    /**\n     * Get the current time in seconds.\n     * @method PIXI.sound.SoundInstance#_now\n     * @private\n     * @return {Number} Seconds since start of context\n     */\n    private _now(): number\n    {\n        return this._parent.context.audioContext.currentTime;\n    }\n\n    /**\n     * Internal update the progress.\n     * @method PIXI.sound.SoundInstance#_update\n     * @private\n     */\n    private _update(force: boolean = false): void\n    {\n        if (this._source)\n        {\n            const now: number = this._now();\n            const delta: number = now - this._lastUpdate;\n\n            if (delta > 0 || force)\n            {\n                this._elapsed += delta;\n                this._lastUpdate = now;\n                const duration: number = this._duration;\n                const progress: number = ((this._elapsed * this._speed) % duration) / duration;\n\n                if (this._fadeIn || this._fadeOut)\n                {\n                    const position: number = progress * duration;\n                    const gain = this._parent.nodes.gain.gain;\n                    const maxVolume = this._parent.volume;\n\n                    if (this._fadeIn)\n                    {\n                        if (position <= this._fadeIn && progress < 1)\n                        {\n                            // Manipulate the gain node directly\n                            // so we can maintain the starting volume\n                            gain.value = maxVolume * (position / this._fadeIn);\n                        }\n                        else\n                        {\n                            gain.value = maxVolume;\n                            this._fadeIn = 0;\n                        }\n                    }\n\n                    if (this._fadeOut && position >= duration - this._fadeOut)\n                    {\n                        const percent: number = (duration - position) / this._fadeOut;\n                        gain.value = maxVolume * percent;\n                    }\n                }\n\n                // Update the progress\n                this._progress = progress;\n\n                /**\n                 * The sound progress is updated.\n                 * @event PIXI.sound.SoundInstance#progress\n                 * @property {Number} progress Amount progressed from 0 to 1\n                 * @property {Number} duration The total playback in seconds\n                 */\n                this.emit(\"progress\", this._progress, duration);\n            }\n        }\n    }\n\n    /**\n     * Initializes the instance.\n     * @method PIXI.sound.SoundInstance#init\n     * @private\n     */\n    private _init(parent: Sound): void\n    {\n        this._parent = parent;\n    }\n\n    /**\n     * Stops the instance.\n     * @method PIXI.sound.SoundInstance#_internalStop\n     * @private\n     */\n    private _internalStop(): void\n    {\n        if (this._source)\n        {\n            this._enabled = false;\n            this._source.onended = null;\n            this._source.stop();\n            this._source = null;\n\n            // Reset the volume\n            this._parent.volume = this._parent.volume;\n        }\n    }\n\n    /**\n     * Callback when completed.\n     * @method PIXI.sound.SoundInstance#_onComplete\n     * @private\n     */\n    private _onComplete(): void\n    {\n        if (this._source)\n        {\n            this._enabled = false;\n            this._source.onended = null;\n        }\n        this._source = null;\n        this._progress = 1;\n        this.emit(\"progress\", 1, this._duration);\n        /**\n         * The sound ends, don't use after this\n         * @event PIXI.sound.SoundInstance#end\n         */\n        this.emit(\"end\", this);\n    }\n}\n"]}
{"version":3,"file":"SoundNodes.js","sourceRoot":"","sources":["../src/SoundNodes.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,2CAAsC;AAWtC;IAAwC,8BAAU;IAkD9C,oBAAY,OAAqB;QAAjC,iBAqBC;QAnBG,IAAM,YAAY,GAAiB,OAAO,CAAC,YAAY,CAAC;QAExD,IAAM,YAAY,GAA0B,YAAY,CAAC,kBAAkB,EAAE,CAAC;QAC9E,IAAM,MAAM,GAAwB,YAAY,CAAC,qBAAqB,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QAC/F,IAAM,IAAI,GAAa,YAAY,CAAC,UAAU,EAAE,CAAC;QACjD,IAAM,QAAQ,GAAiB,YAAY,CAAC,cAAc,EAAE,CAAC;QAE7D,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC/B,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACvB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAClC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAEpC,QAAA,kBAAM,QAAQ,EAAE,IAAI,CAAC,SAAC;QAEtB,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,KAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;;IAC7B,CAAC;IAMM,4BAAO,GAAd;QAEI,iBAAM,OAAO,WAAE,CAAC;QAEhB,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC;QAC/B,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;QACzB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;QACvB,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;QAE3B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QAErB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IACxB,CAAC;IAOM,sCAAiB,GAAxB;QAEI,IAAM,IAAI,GAA0B,IAAI,CAAC,YAAY,CAAC;QACtD,IAAM,KAAK,GAA0B,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,kBAAkB,EAAE,CAAC;QACpF,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,KAAK,CAAC,YAAY,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;QACnD,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACvB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IACL,iBAAC;AAAD,CAAC,AA7GD,CAAwC,oBAAU;AAQhC,sBAAW,GAAW,GAAG,CAAC","sourcesContent":["import Filterable from \"./Filterable\";\nimport Filter from \"./filters/Filter\";\nimport SoundContext from \"./SoundContext\";\n\n/**\n * @class SoundNodes\n * @extends PIXI.sound.Filterable\n * @private\n * @memberof PIXI.sound\n * @param {SoundContext} audioContext The audio context.\n */\nexport default class SoundNodes extends Filterable\n{\n    /**\n     * The buffer size for script processor\n     * @name PIXI.sound.SoundNodes.BUFFER_SIZE\n     * @type {Number}\n     * @default 256\n     */\n    public static BUFFER_SIZE: number = 256;\n\n    /**\n     * Get the buffer source node\n     * @name PIXI.sound.SoundNodes#bufferSource\n     * @type {AudioBufferSourceNode}\n     * @readOnly\n     */\n    public bufferSource: AudioBufferSourceNode;\n\n    /**\n     * Get the script processor node.\n     * @name PIXI.sound.SoundNodes#script\n     * @type {ScriptProcessorNode}\n     * @readOnly\n     */\n    public script: ScriptProcessorNode;\n\n    /**\n     * Get the gain node\n     * @name PIXI.sound.SoundNodes#gain\n     * @type {GainNode}\n     * @readOnly\n     */\n    public gain: GainNode;\n\n    /**\n     * Get the analyser node\n     * @name PIXI.sound.SoundNodes#analyser\n     * @type {AnalyserNode}\n     * @readOnly\n     */\n    public analyser: AnalyserNode;\n\n    /**\n     * Reference to the SoundContext\n     * @name PIXI.sound.SoundNodes#context\n     * @type {PIXI.sound.SoundContext}\n     * @readOnly\n     */\n    public context: SoundContext;\n\n    constructor(context: SoundContext)\n    {\n        const audioContext: AudioContext = context.audioContext;\n\n        const bufferSource: AudioBufferSourceNode = audioContext.createBufferSource();\n        const script: ScriptProcessorNode = audioContext.createScriptProcessor(SoundNodes.BUFFER_SIZE);\n        const gain: GainNode = audioContext.createGain();\n        const analyser: AnalyserNode = audioContext.createAnalyser();\n\n        bufferSource.connect(analyser);\n        analyser.connect(gain);\n        gain.connect(context.destination);\n        script.connect(context.destination);\n\n        super(analyser, gain);\n\n        this.context = context;\n        this.bufferSource = bufferSource;\n        this.script = script;\n        this.gain = gain;\n        this.analyser = analyser;\n    }\n\n    /**\n     * Cleans up.\n     * @method PIXI.sound.SoundNodes#destroy\n     */\n    public destroy(): void\n    {\n        super.destroy();\n\n        this.bufferSource.disconnect();\n        this.script.disconnect();\n        this.gain.disconnect();\n        this.analyser.disconnect();\n\n        this.bufferSource = null;\n        this.script = null;\n        this.gain = null;\n        this.analyser = null;\n\n        this.context = null;\n    }\n\n    /**\n     * Clones the bufferSource. Used just before playing a sound.\n     * @method PIXI.sound.SoundNodes#cloneBufferSource\n     * @returns {AudioBufferSourceNode} The clone AudioBufferSourceNode.\n     */\n    public cloneBufferSource(): AudioBufferSourceNode\n    {\n        const orig: AudioBufferSourceNode = this.bufferSource;\n        const clone: AudioBufferSourceNode = this.context.audioContext.createBufferSource();\n        clone.buffer = orig.buffer;\n        clone.playbackRate.value = orig.playbackRate.value;\n        clone.loop = orig.loop;\n        clone.connect(this.destination);\n        return clone;\n    }\n}\n"]}
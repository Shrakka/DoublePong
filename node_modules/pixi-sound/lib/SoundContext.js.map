{"version":3,"file":"SoundContext.js","sourceRoot":"","sources":["../src/SoundContext.ts"],"names":[],"mappings":"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","sourcesContent":["import Filterable from \"./Filterable\";\n\n/**\n * @description Main class to handle WebAudio API. There's a simple chain\n * of AudioNode elements: analyser > gainNode > compressor > context.destination.\n * any filters that are added are inserted between the analyser and gainNode nodes\n * @class SoundContext\n * @extends PIXI.sound.Filterable\n * @memberof PIXI.sound\n */\nexport default class SoundContext extends Filterable\n{\n    /**\n     * Handle the volume.\n     * @name PIXI.sound.SoundContext#gain\n     * @type {GainNode}\n     * @readOnly\n     */\n    public gain: GainNode;\n\n    /**\n     * Context Compressor node\n     * @name PIXI.sound.SoundContext#compressor\n     * @type {DynamicsCompressorNode}\n     * @readOnly\n     */\n    public compressor: DynamicsCompressorNode;\n\n    /**\n     * Context Analyser node\n     * @name PIXI.sound.SoundContext#analyser\n     * @type {AnalyserNode}\n     * @readOnly\n     */\n    public analyser: AnalyserNode;\n\n    /**\n     * The instance of the AudioContext for WebAudio API.\n     * @name PIXI.sound.SoundContext#_ctx\n     * @type {AudioContext}\n     * @private\n     */\n    private _ctx: AudioContext;\n\n    /**\n     * The instance of the OfflineAudioContext for fast decoding audio.\n     * @name PIXI.sound.SoundContext#_offlineCtx\n     * @type {OfflineAudioContext}\n     * @private\n     */\n    private _offlineCtx: OfflineAudioContext;\n\n    /**\n     * Current muted status of the context\n     * @name PIXI.sound.SoundContext#_muted\n     * @type {Boolean}\n     * @private\n     * @default false\n     */\n    private _muted: boolean;\n\n    /**\n     * Current volume from 0 to 1\n     * @name PIXI.sound.SoundContext#_volume\n     * @type {Number}\n     * @private\n     * @default 1\n     */\n    private _volume: number;\n\n    /**\n     * Current paused status\n     * @name PIXI.sound.SoundContext#_paused\n     * @type {Boolean}\n     * @private\n     * @default false\n     */\n    private _paused: boolean;\n\n    /**\n     * Indicated whether audio on iOS has been unlocked, which requires a touchend/mousedown event that plays an\n     * empty sound.\n     * @name PIXI.sound.SoundContext#_unlocked\n     * @type {boolean}\n     * @private\n     */\n    private _unlocked: boolean;\n\n    constructor()\n    {\n        const ctx = new SoundContext.AudioContext();\n        const gain: GainNode = ctx.createGain();\n        const compressor: DynamicsCompressorNode = ctx.createDynamicsCompressor();\n        const analyser: AnalyserNode = ctx.createAnalyser();\n\n        // setup the end of the node chain\n        analyser.connect(gain);\n        gain.connect(compressor);\n        compressor.connect(ctx.destination);\n\n        super(analyser, gain);\n\n        this._ctx = ctx;\n        this._offlineCtx = new SoundContext.OfflineAudioContext(1, 2, ctx.sampleRate);\n        this._unlocked = false;\n\n        this.gain = gain;\n        this.compressor = compressor;\n        this.analyser = analyser;\n\n        // Set the defaults\n        this.volume = 1;\n        this.muted = false;\n        this.paused = false;\n\n        // Listen for document level clicks to unlock WebAudio on iOS. See the _unlock method.\n        if (\"ontouchstart\" in window && ctx.state !== \"running\")\n        {\n            this._unlock(); // When played inside of a touch event, this will enable audio on iOS immediately.\n            this._unlock = this._unlock.bind(this);\n            document.addEventListener(\"mousedown\", this._unlock, true);\n            document.addEventListener(\"touchstart\", this._unlock, true);\n            document.addEventListener(\"touchend\", this._unlock, true);\n        }\n    }\n\n    /**\n     * Try to unlock audio on iOS. This is triggered from either WebAudio plugin setup (which will work if inside of\n     * a `mousedown` or `touchend` event stack), or the first document touchend/mousedown event. If it fails (touchend\n     * will fail if the user presses for too long, indicating a scroll event instead of a click event.\n     *\n     * Note that earlier versions of iOS supported `touchstart` for this, but iOS9 removed this functionality. Adding\n     * a `touchstart` event to support older platforms may preclude a `mousedown` even from getting fired on iOS9, so we\n     * stick with `mousedown` and `touchend`.\n     * @method PIXI.sound.SoundContext#_unlock\n     * @private\n     */\n    private _unlock(): void\n    {\n        if (this._unlocked)\n        {\n            return;\n        }\n        this.playEmptySound();\n        if (this._ctx.state === \"running\")\n        {\n            document.removeEventListener(\"mousedown\", this._unlock, true);\n            document.removeEventListener(\"touchend\", this._unlock, true);\n            document.removeEventListener(\"touchstart\", this._unlock, true);\n            this._unlocked = true;\n        }\n    }\n\n    /**\n     * Plays an empty sound in the web audio context.  This is used to enable web audio on iOS devices, as they\n     * require the first sound to be played inside of a user initiated event (touch/click).\n     * @method PIXI.sound.SoundContext#playEmptySound\n     */\n    public playEmptySound(): void\n    {\n        const source = this._ctx.createBufferSource();\n        source.buffer = this._ctx.createBuffer(1, 1, 22050);\n        source.connect(this._ctx.destination);\n        source.start(0, 0, 0);\n    }\n\n    /**\n     * Get AudioContext class, if not supported returns `null`\n     * @name PIXI.sound.SoundContext.AudioContext\n     * @type {Function}\n     * @static\n     */\n    public static get AudioContext(): typeof AudioContext\n    {\n        const win: any = window as any;\n        return (\n            win.AudioContext ||\n            win.webkitAudioContext ||\n            null\n        );\n    }\n\n    /**\n     * Get OfflineAudioContext class, if not supported returns `null`\n     * @name PIXI.sound.SoundContext.OfflineAudioContext\n     * @type {Function}\n     * @static\n     */\n    public static get OfflineAudioContext(): typeof OfflineAudioContext\n    {\n        const win: any = window as any;\n        return (\n            win.OfflineAudioContext ||\n            win.webkitOfflineAudioContext ||\n            null\n        );\n    }\n\n    /**\n     * Destroy this context.\n     * @method PIXI.sound.SoundContext#destroy\n     */\n    public destroy()\n    {\n        super.destroy();\n\n        const ctx: any = this._ctx as any;\n        // check if browser supports AudioContext.close()\n        if (typeof ctx.close !== \"undefined\")\n        {\n            ctx.close();\n        }\n        this.analyser.disconnect();\n        this.gain.disconnect();\n        this.compressor.disconnect();\n        this.gain = null;\n        this.analyser = null;\n        this.compressor = null;\n        this._offlineCtx = null;\n        this._ctx = null;\n    }\n\n    /**\n     * The WebAudio API AudioContext object.\n     * @name PIXI.sound.SoundContext#audioContext\n     * @type {AudioContext}\n     * @readOnly\n     */\n    public get audioContext(): AudioContext\n    {\n        return this._ctx;\n    }\n\n    /**\n     * The WebAudio API OfflineAudioContext object.\n     * @name PIXI.sound.SoundContext#offlineContext\n     * @type {OfflineAudioContext}\n     * @readOnly\n     */\n    public get offlineContext(): OfflineAudioContext\n    {\n        return this._offlineCtx;\n    }\n\n    /**\n     * Sets the muted state.\n     * @type {Boolean}\n     * @name PIXI.sound.SoundContext#muted\n     * @default false\n     */\n    public get muted(): boolean\n    {\n        return this._muted;\n    }\n    public set muted(muted: boolean)\n    {\n        this._muted = !!muted;\n        this.gain.gain.value = this._muted ? 0 : this._volume;\n    }\n\n    /**\n     * Sets the volume from 0 to 1.\n     * @type {Number}\n     * @name PIXI.sound.SoundContext#volume\n     * @default 1\n     */\n    public set volume(volume: number)\n    {\n        // update volume\n        this._volume = volume;\n\n        // update actual volume IIF not muted\n        if (!this._muted)\n        {\n            this.gain.gain.value = this._volume;\n        }\n    }\n    public get volume(): number\n    {\n        return this._volume;\n    }\n\n    /**\n     * Pauses all sounds.\n     * @type {Boolean}\n     * @name PIXI.sound.SoundContext#paused\n     * @default false\n     */\n    public set paused(paused: boolean)\n    {\n        if (paused && this._ctx.state === \"running\")\n        {\n            (this._ctx as any).suspend();\n        }\n        else if (!paused && this._ctx.state === \"suspended\")\n        {\n            (this._ctx as any).resume();\n        }\n        this._paused = paused;\n    }\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n\n    /**\n     * Toggles the muted state.\n     * @method PIXI.sound.SoundContext#toggleMute\n     * @return {Boolean} The current muted state.\n     */\n    public toggleMute(): boolean\n    {\n        this.muted = !this.muted;\n        return this._muted;\n    }\n\n    /**\n     * Decode the audio data\n     * @method decode\n     * @param {ArrayBuffer} arrayBuffer Buffer from loader\n     * @param {Function} callback When completed, error and audioBuffer are parameters.\n     */\n    public decode(arrayBuffer: ArrayBuffer, callback: (err?: Error, buffer?: AudioBuffer) => void): void\n    {\n        this._offlineCtx.decodeAudioData(\n            arrayBuffer, (buffer: AudioBuffer) => {\n                callback(null, buffer);\n            },\n            () => {\n                callback(new Error(\"Unable to decode file\"));\n            },\n        );\n    }\n}\n"]}
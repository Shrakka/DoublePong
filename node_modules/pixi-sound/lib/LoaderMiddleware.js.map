{"version":3,"file":"LoaderMiddleware.js","sourceRoot":"","sources":["../src/LoaderMiddleware.ts"],"names":[],"mappings":";;AAAA,iCAA4B;AAG5B,IAAM,gBAAgB,GAAa,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;AAKvE,oBAAoB,QAA+B,EAAE,IAAgB;IAEjE,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,IAAI,gBAAgB,CAAC,OAAO,CAAE,QAAgB,CAAC,aAAa,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CACtF,CAAC;QACI,QAAgB,CAAC,KAAK,GAAG,eAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE;YAC/C,MAAM,EAAE,IAAI;YACZ,OAAO,EAAE,IAAI;YACb,SAAS,EAAE,QAAQ,CAAC,IAAI;SAC3B,CAAC,CAAC;IACP,CAAC;IACD,IAAI,CACJ,CAAC;QACG,IAAI,EAAE,CAAC;IACX,CAAC;AACL,CAAC;AAKD;IAEI,MAAM,CAAC,UAAU,CAAC;AACtB,CAAC;AAMD;IAGI,IAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;IAGvC,gBAAgB,CAAC,OAAO,CAAC,UAAC,GAAG;QACzB,QAAQ,CAAC,mBAAmB,CAAC,GAAG,EAAE,QAAQ,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QACrE,QAAQ,CAAC,oBAAoB,CAAC,GAAG,EAAE,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAGH,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;IACzD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AAChC,CAAC;AAdD,0BAcC","sourcesContent":["import sound from \"./index\";\n\n// Supported audio formats\nconst AUDIO_EXTENSIONS: string[] = [\"wav\", \"mp3\", \"ogg\", \"oga\", \"m4a\"];\n\n/**\n * Actual resource-loader middleware for sound class\n */\nfunction middleware(resource: PIXI.loaders.Resource, next: () => void): void\n{\n    if (resource.data && AUDIO_EXTENSIONS.indexOf((resource as any)._getExtension()) > -1)\n    {\n        (resource as any).sound = sound.add(resource.name, {\n            loaded: next,\n            preload: true,\n            srcBuffer: resource.data,\n        });\n    }\n    else\n    {\n        next();\n    }\n}\n\n/**\n * Middleware factory for addPixiMiddleware\n */\nfunction middlewareFactory()\n{\n    return middleware;\n}\n\n/**\n * Install the middleware\n * @private\n */\nexport function install()\n{\n    // Configure PIXI Loader to handle audio files correctly\n    const Resource = PIXI.loaders.Resource;\n\n    // Load all audio files as ArrayBuffers\n    AUDIO_EXTENSIONS.forEach((ext) => {\n        Resource.setExtensionXhrType(ext, Resource.XHR_RESPONSE_TYPE.BUFFER);\n        Resource.setExtensionLoadType(ext, Resource.LOAD_TYPE.XHR);\n    });\n\n    // Install the middleware\n    PIXI.loaders.Loader.addPixiMiddleware(middlewareFactory);\n    PIXI.loader.use(middleware);\n}\n"]}
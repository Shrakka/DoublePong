{"version":3,"file":"Sound.js","sourceRoot":"","sources":["../src/Sound.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from \"path\";\nimport Filter from \"./filters/Filter\";\nimport soundLibrary from \"./index\";\nimport SoundContext from \"./SoundContext\";\nimport SoundInstance from \"./SoundInstance\";\nimport SoundNodes from \"./SoundNodes\";\nimport SoundSprite from \"./SoundSprite\";\nimport {SoundSpriteData} from \"./SoundSprite\";\n\nexport interface Options {\n    autoPlay?: boolean;\n    preaload?: boolean;\n    singleInstance?: boolean;\n    volume?: number;\n    speed?: number;\n    complete?: CompleteCallback;\n    loaded?: LoadedCallback;\n    preload?: boolean;\n    loop?: boolean;\n    src?: string;\n    srcBuffer?: ArrayBuffer;\n    useXHR?: boolean;\n    sprites?: {[id: string]: SoundSpriteData};\n}\n\nexport type SoundSprites = {[id: string]: SoundSprite};\n\nexport interface PlayOptions {\n    start?: number;\n    end?: number;\n    speed?: number;\n    loop?: boolean;\n    fadeIn?: number;\n    fadeOut?: number;\n    sprite?: string;\n    complete?: CompleteCallback;\n    loaded?: LoadedCallback;\n}\n\n/**\n * Callback when sound is loaded.\n * @callback PIXI.sound.Sound~loadedCallback\n * @param {Error} err The callback error.\n * @param {PIXI.sound.Sound} sound The instance of new sound.\n * @param {PIXI.sound.SoundInstance} instance The instance of auto-played sound.\n */\nexport declare type LoadedCallback = (err: Error, sound?: Sound, instance?: SoundInstance) => void;\n\n/**\n * Callback when sound is completed.\n * @callback PIXI.sound.Sound~completeCallback\n * @param {PIXI.sound.Sound} sound The instance of sound.\n */\nexport declare type CompleteCallback = (sound: Sound) => void;\n\n/**\n * Represents a single sound element. Can be used to play, pause, etc. sound instances.\n *\n * @class Sound\n * @memberof PIXI.sound\n * @example\n * const foo = PIXI.sound.Sound.from('foo.mp3');\n * foo.play();\n * @param {PIXI.sound.SoundContext} context The SoundContext instance.\n * @param {ArrayBuffer|String|Object} options Either the path or url to the source file.\n *        or the object of options to use. See {@link PIXI.sound.Sound.from}\n */\nexport default class Sound\n{\n    /**\n     * `true` if the buffer is loaded.\n     * @name PIXI.sound.Sound#isLoaded\n     * @type {Boolean}\n     * @default false\n     */\n    public isLoaded: boolean;\n\n    /**\n     * `true` if the sound is currently being played.\n     * @name PIXI.sound.Sound#isPlaying\n     * @type {Boolean}\n     * @default false\n     * @readOnly\n     */\n    public isPlaying: boolean;\n\n    /**\n     * true to start playing immediate after load.\n     * @name PIXI.sound.Sound#autoPlay\n     * @type {Boolean}\n     * @private\n     * @default false\n     * @readOnly\n     */\n    public autoPlay: boolean;\n\n    /**\n     * `true` to disallow playing multiple layered instances at once.\n     * @name PIXI.sound.Sound#singleInstance\n     * @type {Boolean}\n     * @default false\n     */\n    public singleInstance: boolean;\n\n    /**\n     * `true` to immediately start preloading.\n     * @name PIXI.sound.Sound#preload\n     * @type {Boolean}\n     * @default false\n     * @readOnly\n     */\n    public preload: boolean;\n\n    /**\n     * The file source to load.\n     * @name PIXI.sound.Sound#src\n     * @type {String}\n     * @readOnly\n     */\n    public src: string;\n\n    /**\n     * The file buffer to load.\n     * @name PIXI.sound.Sound#srcBuffer\n     * @type {ArrayBuffer}\n     * @readOnly\n     */\n    public srcBuffer: ArrayBuffer;\n\n    /**\n     * `true` to use XMLHttpRequest object to load.\n     * Default is to use NodeJS's fs module to read the sound.\n     * @name PIXI.sound.Sound#useXHR\n     * @type {Boolean}\n     * @default false\n     */\n    public useXHR: boolean;\n\n    /**\n     * The options when auto-playing.\n     * @name PIXI.sound.Sound#_autoPlayOptions\n     * @type {PlayOptions}\n     * @private\n     */\n    private _autoPlayOptions: PlayOptions;\n\n    /**\n     * The internal volume.\n     * @name PIXI.sound.Sound#_volume\n     * @type {Number}\n     * @private\n     */\n    private _volume: number;\n\n    /**\n     * Reference to the sound context.\n     * @name PIXI.sound.Sound#_context\n     * @type {SoundContext}\n     * @private\n     */\n    private _sprites: SoundSprites;\n\n    /**\n     * Reference to the sound context.\n     * @name PIXI.sound.Sound#_context\n     * @type {SoundContext}\n     * @private\n     */\n    private _context: SoundContext;\n\n    /**\n     * Instance of the chain builder.\n     * @name PIXI.sound.Sound#_nodes\n     * @type {SoundNodes}\n     * @private\n     */\n    private _nodes: SoundNodes;\n\n    /**\n     * Instance of the source node.\n     * @name PIXI.sound.Sound#_source\n     * @type {AudioBufferSourceNode}\n     * @private\n     */\n    private _source: AudioBufferSourceNode;\n\n    /**\n     * The collection of instances being played.\n     * @name PIXI.sound.Sound#_instances\n     * @type {Array<SoundInstance>}\n     * @private\n     */\n    private _instances: SoundInstance[];\n\n    /**\n     * Create a new sound instance from source.\n     * @method PIXI.sound.Sound.from\n     * @param {ArrayBuffer|String|Object} options Either the path or url to the source file.\n     *        or the object of options to use.\n     * @param {ArrayBuffer|String} [options.src] If `options` is an object, the source of file.\n     * @param {Boolean} [options.autoPlay=false] true to play after loading.\n     * @param {Boolean} [options.preload=false] true to immediately start preloading.\n     * @param {Boolean} [options.singleInstance=false] `true` to disallow playing multiple layered instances at once.\n     * @param {Number} [options.volume=1] The amount of volume 1 = 100%.\n     * @param {Boolean} [options.useXHR=true] true to use XMLHttpRequest to load the sound. Default is false,\n     *        loaded with NodeJS's `fs` module.\n     * @param {Number} [options.speed=1] The playback rate where 1 is 100% speed.\n     * @param {Object} [options.sprites] The map of sprite data. Where a sprite is an object\n     *        with a `start` and `end`, which are the times in seconds. Optionally, can include\n     *        a `speed` amount where 1 is 100% speed.\n     * @param {PIXI.sound.Sound~completeCallback} [options.complete=null] Global complete callback\n     *        when play is finished.\n     * @param {PIXI.sound.Sound~loadedCallback} [options.loaded=null] Call when finished loading.\n     * @param {Boolean} [options.loop=false] true to loop the audio playback.\n     * @return {PIXI.sound.Sound} Created sound instance.\n     */\n    public static from(options: string|Options|ArrayBuffer): Sound\n    {\n        return new Sound(soundLibrary.context, options);\n    }\n\n    constructor(context: SoundContext, source: string|Options|ArrayBuffer)\n    {\n        let options: Options = {};\n\n        if (typeof source === \"string\")\n        {\n            options.src = source as string;\n        }\n        else if (source instanceof ArrayBuffer)\n        {\n            options.srcBuffer = source as ArrayBuffer;\n        }\n        else\n        {\n            options = source;\n        }\n\n        // Default settings\n        options = Object.assign({\n            autoPlay: false,\n            singleInstance: false,\n            src: null,\n            srcBuffer: null,\n            preload: false,\n            volume: 1,\n            speed: 1,\n            complete: null,\n            loaded: null,\n            loop: false,\n            useXHR: true,\n        }, options);\n\n        this._context = context;\n        this._nodes = new SoundNodes(this._context);\n        this._source = this._nodes.bufferSource;\n        this._instances = [];\n        this._sprites = {};\n\n        const complete = options.complete;\n        this._autoPlayOptions = complete ? { complete } : null;\n\n        this.isLoaded = false;\n        this.isPlaying = false;\n        this.autoPlay = options.autoPlay;\n        this.singleInstance = options.singleInstance;\n        this.preload = options.preload || this.autoPlay;\n        this.src = options.src;\n        this.srcBuffer = options.srcBuffer;\n        this.useXHR = options.useXHR;\n        this.volume = options.volume;\n        this.loop = options.loop;\n        this.speed = options.speed;\n\n        if (options.sprites)\n        {\n            this.addSprites(options.sprites);\n        }\n\n        if (this.preload)\n        {\n            this._beginPreload(options.loaded);\n        }\n    }\n\n    /**\n     * Destructor, safer to use `SoundLibrary.remove(alias)` to remove this sound.\n     * @private\n     * @method PIXI.sound.Sound#destroy\n     */\n    public destroy(): void\n    {\n        // destroy this._nodes\n        this._nodes.destroy();\n        this._nodes = null;\n        this._context = null;\n        this._source = null;\n\n        this.removeSprites();\n        this._sprites = null;\n\n        this.srcBuffer = null;\n\n        this._removeInstances();\n        this._instances = null;\n    }\n\n    /**\n     * If the current sound is playable (loaded).\n     * @name PIXI.sound.Sound#isPlayable\n     * @type {Boolean}\n     * @readOnly\n     */\n    public get isPlayable(): boolean\n    {\n        return this.isLoaded && !!this._source && !!this._source.buffer;\n    }\n\n    /**\n     * The current current sound being played in.\n     * @name PIXI.sound.Sound#context\n     * @type {PIXI.sound.SoundContext}\n     * @readOnly\n     */\n    public get context(): SoundContext\n    {\n        return this._context;\n    }\n\n    /**\n     * Gets and sets the volume.\n     * @name PIXI.sound.Sound#volume\n     * @type {Number}\n     */\n    public get volume(): number\n    {\n        return this._volume;\n    }\n    public set volume(volume: number)\n    {\n        this._volume = this._nodes.gain.gain.value = volume;\n    }\n\n    /**\n     * Gets and sets the looping.\n     * @name PIXI.sound.Sound#loop\n     * @type {Boolean}\n     */\n    public get loop(): boolean\n    {\n        return this._source.loop;\n    }\n    public set loop(loop: boolean)\n    {\n        this._source.loop = !!loop;\n    }\n\n    /**\n     * Gets and sets the buffer.\n     * @name PIXI.sound.Sound#buffer\n     * @type {AudioBuffer}\n     */\n    public get buffer(): AudioBuffer\n    {\n        return this._source.buffer;\n    }\n    public set buffer(buffer: AudioBuffer)\n    {\n        this._source.buffer = buffer;\n    }\n\n    /**\n     * Get the duration in seconds.\n     * @name PIXI.sound.Sound#duration\n     * @type {number}\n     */\n    public get duration(): number\n    {\n        // @if DEBUG\n        console.assert(this.isPlayable, \"Sound not yet playable, no duration\");\n        // @endif\n        return this._source.buffer.duration;\n    }\n\n    /**\n     * Get the current chained nodes object\n     * @private\n     * @name PIXI.sound.Sound#nodes\n     * @type {PIXI.sound.SoundNodes}\n     */\n    public get nodes(): SoundNodes\n    {\n        return this._nodes;\n    }\n\n    /**\n     * Push the collection of filteres\n     * @name PIXI.sound.Sound#filters\n     * @type {PIXI.sound.SoundNodes}\n     */\n    public get filters(): Filter[]\n    {\n        return this._nodes.filters;\n    }\n    public set filters(filters: Filter[])\n    {\n        this._nodes.filters = filters;\n    }\n\n    /**\n     * The playback rate where 1 is 100%\n     * @name PIXI.sound.Sound#speed\n     * @type {Number}\n     * @default 1\n     */\n    public get speed(): number\n    {\n        return this._source.playbackRate.value;\n    }\n    public set speed(value: number)\n    {\n        this._source.playbackRate.value = value;\n    }\n\n    /**\n     * Gets the list of instances that are currently being played of this sound.\n     * @name PIXI.sound.Sound#instances\n     * @type {Array<SoundInstance>}\n     * @readOnly\n     */\n    public get instances(): SoundInstance[]\n    {\n        return this._instances;\n    }\n\n    /**\n     * Get the map of sprites.\n     * @name PIXI.sound.Sound#sprites\n     * @type {Object}\n     * @readOnly\n     */\n    public get sprites(): SoundSprites\n    {\n        return this._sprites;\n    }\n\n    /**\n     * Add a sound sprite, which is a saved instance of a longer sound.\n     * Similar to an image spritesheet.\n     * @method PIXI.sound.Sound#addSprites\n     * @param {String} alias The unique name of the sound sprite.\n     * @param {object} data Either completed function or play options.\n     * @param {Number} data.start Time when to play the sound in seconds.\n     * @param {Number} data.end Time to end playing in seconds.\n     * @param {Number} [data.speed] Override default speed, default to the Sound's speed setting.\n     * @return {PIXI.sound.SoundSprite} Sound sprite result.\n     */\n    public addSprites(alias: string, data: SoundSpriteData): SoundSprite;\n\n    /**\n     * Convenience method to add more than one sprite add a time.\n     * @method PIXI.sound.Sound#addSprites\n     * @param {Object} data Map of sounds to add where the key is the alias,\n     *        and the data are configuration options, see {@PIXI.sound.Sound#addSprite} for info on data.\n     * @return {Object} The map of sound sprites added.\n     */\n    public addSprites(sprites: {[id: string]: SoundSpriteData}): SoundSprites;\n\n    // Actual implementation\n    public addSprites(source: string|{[id: string]: SoundSpriteData}, data?: SoundSpriteData): SoundSprite|SoundSprites\n    {\n        if (typeof source === \"object\")\n        {\n            const results: SoundSprites = {};\n            for (const alias in source)\n            {\n                results[alias] = this.addSprites(alias, source[alias]);\n            }\n            return results;\n        }\n        else if (typeof source === \"string\")\n        {\n            console.assert(!this._sprites[source], `Alias ${source} is already taken`);\n            const sprite = new SoundSprite(this, data);\n            this._sprites[source] = sprite;\n            return sprite;\n        }\n    }\n\n    /**\n     * Remove all sound sprites.\n     * @method PIXI.sound.Sound#removeSprites\n     * @return {PIXI.sound.Sound} Sound instance for chaining.\n     */\n\n    /**\n     * Remove a sound sprite.\n     * @method PIXI.sound.Sound#removeSprites\n     * @param {String} alias The unique name of the sound sprite.\n     * @return {PIXI.sound.Sound} Sound instance for chaining.\n     */\n    public removeSprites(alias?: string): Sound\n    {\n        if (!alias)\n        {\n            for (const name in this._sprites)\n            {\n                this.removeSprites(name);\n            }\n        }\n        else\n        {\n            const sprite: SoundSprite = this._sprites[alias];\n\n            if (sprite !== undefined)\n            {\n                sprite.destroy();\n                delete this._sprites[alias];\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Play a sound sprite, which is a saved instance of a longer sound.\n     * Similar to an image spritesheet.\n     * @method PIXI.sound.Sound#play\n     * @param {String} alias The unique name of the sound sprite.\n     * @param {object} data Either completed function or play options.\n     * @param {Number} data.start Time when to play the sound in seconds.\n     * @param {Number} data.end Time to end playing in seconds.\n     * @param {Number} [data.speed] Override default speed, default to the Sound's speed setting.\n     * @param {PIXI.sound.Sound~completeCallback} [callback] Callback when completed.\n     * @return {PIXI.sound.SoundInstance|Promise<PIXI.sound.SoundInstance>} The sound instance,\n     *        this cannot be reused after it is done playing. Returns a Promise if the sound\n     *        has not yet loaded.\n     */\n    public play(alias: string, callback?: CompleteCallback): SoundInstance|Promise<SoundInstance>;\n\n    /**\n     * Plays the sound.\n     * @method PIXI.sound.Sound#play\n     * @param {PIXI.sound.Sound~completeCallback|object} options Either completed function or play options.\n     * @param {Number} [options.start=0] Time when to play the sound in seconds.\n     * @param {Number} [options.end] Time to end playing in seconds.\n     * @param {String} [options.sprite] Play a named sprite. Will override end, start and speed options.\n     * @param {Number} [options.fadeIn] Amount of time to fade in volume. If less than 10,\n     *        considered seconds or else milliseconds.\n     * @param {Number} [options.fadeOut] Amount of time to fade out volume. If less than 10,\n     *        considered seconds or else milliseconds.\n     * @param {Number} [options.speed] Override default speed, default to the Sound's speed setting.\n     * @param {Boolean} [options.loop] Override default loop, default to the Sound's loop setting.\n     * @param {PIXI.sound.Sound~completeCallback} [options.complete] Callback when complete.\n     * @param {PIXI.sound.Sound~loadedCallback} [options.loaded] If the sound isn't already preloaded, callback when\n     *        the audio has completely finished loading and decoded.\n     * @return {PIXI.sound.SoundInstance|Promise<PIXI.sound.SoundInstance>} The sound instance,\n     *        this cannot be reused after it is done playing. Returns a Promise if the sound\n     *        has not yet loaded.\n     */\n    public play(source?: PlayOptions|CompleteCallback,\n                callback?: CompleteCallback): SoundInstance|Promise<SoundInstance>;\n\n    // Overloaded function\n    public play(source?: any, complete?: CompleteCallback): SoundInstance|Promise<SoundInstance>\n    {\n        let options: PlayOptions;\n\n        if (typeof source === \"string\")\n        {\n            const sprite: string = source as string;\n            options = { sprite, complete };\n        }\n        else if (typeof source === \"function\")\n        {\n            options = {};\n            options.complete = source as CompleteCallback;\n        }\n        else\n        {\n            options = source as PlayOptions;\n        }\n\n        options = Object.assign({\n            complete: null,\n            loaded: null,\n            sprite: null,\n            start: 0,\n            fadeIn: 0,\n            fadeOut: 0,\n        }, options || {});\n\n        // A sprite is specified, add the options\n        if (options.sprite)\n        {\n            const alias: string = options.sprite;\n            // @if DEBUG\n            console.assert(!!this._sprites[alias], `Alias ${alias} is not available`);\n            // @endif\n            const sprite: SoundSprite = this._sprites[alias];\n            options.start = sprite.start;\n            options.end = sprite.end;\n            options.speed = sprite.speed;\n            delete options.sprite;\n        }\n\n        // @deprecated offset option\n        if ((options as any).offset) {\n            options.start = (options as any).offset as number;\n        }\n\n        // if not yet playable, ignore\n        // - usefull when the sound download isnt yet completed\n        if (!this.isLoaded)\n        {\n            return new Promise<SoundInstance>((resolve, reject) =>\n            {\n                this.autoPlay = true;\n                this._autoPlayOptions = options;\n                this._beginPreload((err: Error, sound: Sound, instance: SoundInstance) =>\n                {\n                    if (err)\n                    {\n                        reject(err);\n                    }\n                    else\n                    {\n                        if (options.loaded)\n                        {\n                            options.loaded(err, sound, instance);\n                        }\n                        resolve(instance);\n                    }\n                });\n            });\n        }\n\n        // Stop all sounds\n        if (this.singleInstance)\n        {\n            this._removeInstances();\n        }\n\n        // clone the bufferSource\n        const instance = SoundInstance.create(this);\n        this._instances.push(instance);\n        this.isPlaying = true;\n        instance.once(\"end\", () => {\n            if (options.complete)\n            {\n                options.complete(this);\n            }\n            this._onComplete(instance);\n        });\n        instance.once(\"stop\", () => {\n            this._onComplete(instance);\n        });\n\n        instance.play(\n            options.start,\n            options.end,\n            options.speed,\n            options.loop,\n            options.fadeIn,\n            options.fadeOut,\n        );\n        return instance;\n    }\n\n    /**\n     * Stops all the instances of this sound from playing.\n     * @method PIXI.sound.Sound#stop\n     * @return {PIXI.sound.Sound} Instance of this sound.\n     */\n    public stop(): Sound\n    {\n        if (!this.isPlayable)\n        {\n            this.autoPlay = false;\n            this._autoPlayOptions = null;\n            return this;\n        }\n        this.isPlaying = false;\n\n        // Go in reverse order so we don't skip items\n        for (let i = this._instances.length - 1; i >= 0; i--)\n        {\n            this._instances[i].stop();\n        }\n        return this;\n    }\n\n    /**\n     * Stops all the instances of this sound from playing.\n     * @method PIXI.sound.Sound#pause\n     * @return {PIXI.sound.Sound} Instance of this sound.\n     */\n    public pause(): Sound\n    {\n        for (let i = this._instances.length - 1; i >= 0; i--)\n        {\n            this._instances[i].paused = true;\n        }\n        this.isPlaying = false;\n        return this;\n    };\n\n    /**\n     * Resuming all the instances of this sound from playing\n     * @method PIXI.sound.Sound#resume\n     * @return {PIXI.sound.Sound} Instance of this sound.\n     */\n    public resume(): Sound\n    {\n        for (let i = this._instances.length - 1; i >= 0; i--)\n        {\n            this._instances[i].paused = false;\n        }\n        this.isPlaying = this._instances.length > 0;\n        return this;\n    }\n\n    /**\n     * Starts the preloading of sound.\n     * @method PIXI.sound.Sound#_beginPreload\n     * @private\n     */\n    private _beginPreload(callback?: LoadedCallback): void\n    {\n        // Load from the file path\n        if (this.src)\n        {\n            this.useXHR ? this._loadUrl(callback) : this._loadPath(callback);\n        }\n        // Load from the arraybuffer, incase it was loaded outside\n        else if (this.srcBuffer)\n        {\n            this._decode(this.srcBuffer, callback);\n        }\n        else if (callback)\n        {\n            callback(new Error(\"sound.src or sound.srcBuffer must be set\"));\n        }\n        else\n        {\n            console.error(\"sound.src or sound.srcBuffer must be set\");\n        }\n    }\n\n    /**\n     * Sound instance completed.\n     * @method PIXI.sound.Sound#_onComplete\n     * @private\n     * @param {PIXI.sound.SoundInstance} instance\n     */\n    private _onComplete(instance: SoundInstance): void\n    {\n        if (this._instances)\n        {\n            const index = this._instances.indexOf(instance);\n            if (index > -1)\n            {\n                this._instances.splice(index, 1);\n            }\n            this.isPlaying = this._instances.length > 0;\n        }\n        instance.destroy();\n    }\n\n    /**\n     * Removes all instances.\n     * @method PIXI.sound.Sound#_removeInstances\n     * @private\n     */\n    private _removeInstances(): void\n    {\n        // destroying also stops\n        for (let i = this._instances.length - 1; i >= 0; i--)\n        {\n            this._instances[i].destroy();\n        }\n        this._instances.length = 0;\n    }\n\n    /**\n     * Loads a sound using XHMLHttpRequest object.\n     * @method PIXI.sound.Sound#_loadUrl\n     * @private\n     */\n    private _loadUrl(callback?: LoadedCallback): void\n    {\n        const request = new XMLHttpRequest();\n        const src: string = this.src;\n        request.open(\"GET\", src, true);\n        request.responseType = \"arraybuffer\";\n\n        // Decode asynchronously\n        request.onload = () => {\n            this.srcBuffer = request.response as ArrayBuffer;\n            this._decode(request.response, callback);\n        };\n\n        // actually start the request\n        request.send();\n    }\n\n    /**\n     * Loads using the file system (NodeJS's fs module).\n     * @method PIXI.sound.Sound#_loadPath\n     * @private\n     */\n    private _loadPath(callback?: LoadedCallback)\n    {\n        const fs = require(\"fs\");\n        const src: string = this.src;\n        fs.readFile(src, (err: Error, data: Buffer) => {\n            if (err)\n            {\n                // @if DEBUG\n                console.error(err);\n                // @endif\n                if (callback)\n                {\n                    callback(new Error(`File not found ${this.src}`));\n                }\n                return;\n            }\n            const arrayBuffer = new ArrayBuffer(data.length);\n            const view = new Uint8Array(arrayBuffer);\n            for (let i = 0; i < data.length; ++i)\n            {\n                view[i] = data[i];\n            }\n            this.srcBuffer = arrayBuffer;\n            this._decode(arrayBuffer, callback);\n        });\n    }\n\n    /**\n     * Decodes the array buffer.\n     * @method PIXI.sound.Sound#decode\n     * @param {ArrayBuffer} arrayBuffer From load.\n     * @private\n     */\n    private _decode(arrayBuffer: ArrayBuffer, callback?: LoadedCallback): void\n    {\n        this._context.decode(arrayBuffer, (err: Error, buffer: AudioBuffer) =>\n        {\n                if (err)\n                {\n                    if (callback)\n                    {\n                        callback(err);\n                    }\n                }\n                else\n                {\n                    this.isLoaded = true;\n                    this.buffer = buffer;\n                    let instance: SoundInstance;\n                    if (this.autoPlay)\n                    {\n                        instance = this.play(this._autoPlayOptions) as SoundInstance;\n                    }\n                    if (callback)\n                    {\n                        callback(null, this, instance);\n                    }\n                }\n            },\n        );\n    }\n}\n"]}